{
    "contents" : "rankhazardplot <- function(...) UseMethod(\"rankhazardplot\")\n\n\nrankhazardplot.default <- function (\n    x, coefs = NULL, xp = NULL, refvalues = NULL, refpoints = NULL,\n    confinterval = NULL, select = 1, legendtext = NULL, \n    axistext = NULL, legendlocation = \"top\", axistextposition = -0.1, \n    reftick = TRUE, refline = FALSE, refline.col = 1, refline.lwd = 1, \n    refline.lty = 2, ylab = NULL, ylim = NULL, yticks = NULL, \n    yvalues = NULL, plottype = \"hazard\", na.rm = TRUE,\n    col = NULL, lwd = 1, lty = 1, pch = NULL, \n    cex = 1, bg = \"transparent\", pt.lwd = 1, ...)\t\t\t\t\n{\n    if(!is.null(confinterval)){\n        x <- confinterval$x\n        if (na.rm) x <- na.omit(x)\n        x <- confinterval$x[select]\n        xp <- confinterval$xp\n        if (na.rm) xp <- na.omit(xp)\n        xp <- confinterval$xp[select]\n        refvalues <- confinterval$refvalues[select]\n    }\n\n    if (na.rm) x <- na.omit(x)\n    if (na.rm & !is.null(xp)) xp <- na.omit(xp)\n\n    n <- dim(x)[1]\t# number of observations\n    m <- dim(x)[2]\t# number of covariates\n\n    if (!identical(plottype, \"hazard\") & !identical(plottype, \"loghazard\")) \t\t\n        stop(\"Unknown plottype\")\n    if (is.null(xp) & is.null(coefs)) \t\t\t\t\t\n        stop(\"Either coefs or xp must be provided.\")\t\t\n    if (is.null(refvalues) & !is.null(xp)) \t\t\t\t\n        stop(\"When xp is given, also refvalues are required.\")\t\n\n    if(is.null(refvalues) & is.null(refpoints)){\t\n        refpoints <- apply(x, 2, median, na.rm = TRUE)\t\n        refvalues <- coefs*refpoints\n    }\n\n    if(is.null(refvalues) & !is.null(refpoints))\t\n        refvalues <- coefs*refpoints\n\n    if (is.null(xp)) \n        xp <- as.data.frame(t(coefs * t(x))) \n\n    lwd <- rep(lwd, length.out = m)\n    lty <- rep(lty, length.out = m)\n    cex <- rep(cex, length.out = m)\n    bg <- rep(bg, length.out = m)\n    pt.lwd <- rep(pt.lwd, length.out = m)\n\n    if (is.null(pch)){pch <- seq(0, m - 1)} \t\t\n    else{pch <- rep(pch, length.out = m)}\t\t\t\t\t\t\t\n    if (is.null(col)) {col <- 1:m }\t\t\t\t\n    else{ col <- rep(col, length.out = m)\t}\t\n    if (is.null(legendtext) & !is.null(axistext)) \n        legendtext <- axistext\t\n    if (!is.null(legendtext) & is.null(axistext)) \n        axistext\t<- legendtext\t \n    if (is.null(legendtext) & is.null(axistext) & !is.null(names(xp))) \n        legendtext <- names(xp)\t\t\t\n    if (is.null(legendtext) & is.null(axistext) & !is.null(names(coefs))) \n        legendtext <- names(coefs)\n    if (is.null(axistext) & !is.null(colnames(x))) \n        axistext <- colnames(x)\t\t\t\n    if (is.null(axistext)) \n        axistext <- legendtext\n\n    ones <- matrix(1, nrow = n, ncol = 1)\t\n    y <- xp - ones %*% refvalues\n\n    if(!is.null(confinterval)){\n        upp_ci <- confinterval$upp - ones %*% confinterval$upprefvalues\n        upp_ci <- upp_ci[select]\n        low_ci <- confinterval$low - ones %*% confinterval$lowrefvalues\n        low_ci <- low_ci[select]\n    }\n\n    if (identical(plottype, \"hazard\")){\n        y <- exp(y)\n    }\n    if (identical(plottype, \"hazard\") & !is.null(confinterval)){\n        low_ci <- exp(low_ci) \n        upp_ci <- exp(upp_ci)\n    }\n    yrange <- y    # makes sure that confidence intervals fit to the screen\n    if(!is.null(confinterval)){\n        yrange <- as.data.frame(c(y, low_ci, upp_ci))\t \n    }  \n\n    if (length(ylim)!= 2){\n        maxy <- max(yrange, na.rm = TRUE)\n        miny <- min(yrange, na.rm = TRUE) \n    }else{\n        maxy <- ylim[2]\n        miny <- ylim[1]\n    }\n\n    if (identical(plottype, \"hazard\")) {\t\n        if(is.null(ylab)) ylab <- \"relative hazard\"\t\t\t\t\t\n        if (is.null(yticks))\n            yticks <- c(pretty(c(miny, 1)), pretty(c(1, maxy)))\t\n        reftickvalue <- 1\n        logvar = \"y\"\n    }    \t\t\t\t\t\t\t\t\t\t\t\n    if (identical(plottype, \"loghazard\")) {\n        if(is.null(ylab)) ylab <- \"logarithm of the relative hazard\"\t\t\t\t\t\t\t\t\t\t\n        if (is.null(yticks))\n            yticks <- c(pretty(c(miny, 0)), pretty(c(0, maxy)))\n        reftickvalue <- 0\t\n        logvar = \"\"\n    }\n\n    if (is.null(yvalues)) yvalues <- yticks\n    quantiles <- c(0, 0.25, 0.5, 0.75, 1)\t\n\n### Output to console ####\n    A <-matrix(0, m, 5)\n    colnames(A) <- c(\"Min.\", \"1st Qu.\", \"Median\" , \"3rd Qu.\", \"Max.\")\n    rownames(A) <- legendtext\n\n    ind <- NULL\n    for(i in 1:m){\n        ordered <- order(x[, i], na.last = TRUE)\n        ind <- cbind(ind, ordered)   # ind is used later\n        A[i,] <- quantile(y[, i], probs = quantiles, na.rm = TRUE)\n    }\n    cat(\"Y-axis range: \", signif(c(miny, maxy), 3), \"\\n\", \"\\n\")\n    if (identical(plottype, \"hazard\")) cat(\"Relative hazards for each covarite:\", \"\\n\")\n    if (identical(plottype, \"loghazard\")) cat(\"Logarithm of the relative hazards for each covarite:\", \"\\n\")\n    print(signif(A, 3))\n###\n    \n    nasum <- colSums(is.na(x))\t\t\t\n\n    for (j in 1:m) {\t\t\t\t\t\t\n        nj <- n - nasum[j]\t\t\t\t\t\n        ranks <- seq(0, 1, length = nj)     # scales the values to [0,1]\n        places <- quantile(1:nj, probs = quantiles)    # quantiles of ranks\n\t\n        if (j == 1) {\n            plot(1, 1, ylim = c(miny, maxy), xlim = c(0, 1), \n              xlab = \"\", ylab = ylab, type = \"n\", col = col[j], \n              pch = pch[j], lwd = lwd[j], lty = lty[j], axes = FALSE, log = logvar, \n              ...)\n\n            axis(1, at = quantiles, labels = FALSE)    # marks ticks on x-axis\n            axis(2, at = yticks, labels = FALSE)    # marks ticks on y-axis\n            axis(2, at = yvalues, labels = as.character(yvalues))    # marks values on y-axis\n\t      box()\t\n\n            if (reftick)    # eboldens the reference tick\n                axis(2, at = reftickvalue, labels = FALSE, lwd.ticks = 2)\n\n            if (refline)    # draws the reference line\n                abline(h = reftickvalue,  col = refline.col, lty = refline.lty, lwd = refline.lwd)\n        }\t\t\t\n    \n        lines(ranks, y[ind[1:nj, j], j], col = col[j], lwd = lwd[j], lty = lty[j], ...)\n        points(quantiles, y[ind[1:nj, j], j][places], col = col[j], pch = pch[j], cex = cex[j], bg = bg[j], lwd = pt.lwd[j], ...)\n\n        xlabels <- x[ind[places, j], j]    # quantiles for covariate j\n        if (is.numeric(xlabels)) xlabels <- signif(xlabels, 3)\n\n        mtext(side = 1, at = c(axistextposition, quantiles),    \n          adj = c(1,rep(0.5, length(quantiles))), text = c(axistext[j], as.character(xlabels)), line = j)\n    \n        if(!is.null(confinterval)) {\n            lines(ranks, low_ci[ind[1:nj, j], j], col = col[j], lwd = lwd[j], lty = lty[j] + 1, ...) #lower confidence interval\n            points(quantiles, low_ci[ind[1:nj, j], j][places], col = col[j], pch = pch[j], cex = cex[j], bg = bg[j], lwd = pt.lwd[j],...)\n            lines(ranks, upp_ci[ind[1:nj, j], j], col = col[j], lwd = lwd[j], lty = lty[j] + 1,...) #upper confidence interval\n            points(quantiles, upp_ci[ind[1:nj, j], j][places], col = col[j], pch = pch[j], cex = cex[j], bg = bg[j], lwd = pt.lwd[j],...)\n        }\n    }\n\n    if (!is.null(confinterval)){\n### Output to console ####\n        cat(\"\\n\")\n        if (identical(plottype, \"hazard\")) \n            cat(\"Relative hazards for the confidence intervals of each covariate:\", \"\\n\")\n        if (identical(plottype, \"loghazard\")) \n            cat(\"Logarithm of the relative hazards for the confidence intervals of each covariate:\", \"\\n\")\n        B <- matrix(0, 2 * m, 5)\n        colnames(B) <- c(\"Min.\", \"1st Qu.\", \"Median\" , \"3rd Qu.\", \"Max.\")\n\t  low_legend <- paste(\"Low\", legendtext, sep = \"_\")\n\t  upp_legend <- paste(\"Upp\", legendtext, sep = \"_\")\n        rownames(B)[2 * 1:m] <- upp_legend\n        rownames(B)[2 * 1:m - 1] <- low_legend\n\n        for(i in 1:m)\n            B[2 * i - 1,] <- quantile(low_ci[, i], probs = quantiles, na.rm = TRUE)\n\n        for(i in 1:m)\n            B[2 * i,] <- quantile(upp_ci[, i], probs = quantiles, na.rm = TRUE)\n    \n        print(signif(B, 3))\n###############\n    }\t\t\n\n    legend(legendlocation, legend = legendtext, col = col, lwd = lwd, \n      pch = pch, lty = lty, bty = \"n\", pt.cex = cex, pt.lwd = pt.lwd, pt.bg = bg)\n\n}\n\n",
    "created" : 1454667708020.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3262573022",
    "id" : "8CA7AFF5",
    "lastKnownWriteTime" : 1396355195,
    "path" : "D:/Nanni/Opiskelu/Tietotekniikka/Ohjelmointityo/GITpaketti/rankhazard/R/default.R",
    "project_path" : "R/default.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}